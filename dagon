#!/bin/bash

directory="${BASH_SOURCE%/*}"
. "$directory/includes/core.sh"
. "$directory/includes/messages.sh"
. "$directory/includes/requirements.sh"

m.status "\nDagon will do your bidding. Sit back and enjoy...\n"
sleep 0.5

flag.check folders
if [ $? == 1 ]; then
  m.status "Creating necessary folders. (You will be asked for your sudo password if needed)"
  sudo mkdir -p "/usr/local/dagon"
  sudo mkdir -p "/usr/local/dagon/roles"
  sudo mkdir -p "/usr/local/dagon/flags"
  sudo chmod -R g+rwx /usr/local
  sudo chgrp -R admin /usr/local

  flag.set folders
fi

m.status "Checking bash requirements"
flag.check bashCommands
if [ $? == 1 ]; then
  requirements.set "eval sleep printf read hash tput"
    requirements.failure eval abort
    requirements.failure sleep abort
    requirements.failure printf abort
    requirements.failure read abort
    requirements.failure hash abort
    requirements.failure dirname abort
    requirements.failure tput abort
  requirements.check

  flag.set bashCommands
fi

username=$USER
export ANSIBLE_ASK_SUDO_PASS=True

requirements.set "git"
  requirements.failure git abort
requirements.check

requirements.set "easy_install pip ansible"
  requirements.failure easy_install abort
  requirements.failure pip "sudo easy_install --quiet pip"
  requirements.failure ansible "sudo pip install --quiet ansible"
requirements.check

flag.check folders
if [ $? == 1 ]; then
  m.status "Creating necessary folders. (You will be asked for your sudo password if needed)"
  sudo mkdir -p "/usr/local/dagon"
  sudo mkdir -p "/usr/local/dagon/roles"
  sudo mkdir -p "/usr/local/dagon/flags"
  sudo chmod -R g+rwx /usr/local
  sudo chgrp -R admin /usr/local

  flag.set folders
fi

if [ -d "/usr/local/dagon/config" ]; then
  m.status "Updating your config from origin."
  cd /usr/local/dagon/config
  git pull -q
fi

flag.check config
if [ $? == 1 ]; then
  m.status "Cloning configuration repository."
  git clone --quiet https://github.com/antoinelafontaine/dagon-config.git /usr/local/dagon/config
  flag.set config
fi

cd /usr/local/dagon

flag.check ansibleConfig
if [ $? == 1 ]; then
  m.status "Creating ansible.cfg file."
  cat <<- --EOF > ansible.cfg
	[defaults]
	roles_path=/usr/local/dagon/roles/dev:/usr/local/dagon/roles:/usr/local/dagon/config/roles
--EOF

  flag.set ansibleConfig
fi

m.status "\nGet requirements using Ansible Galaxy"
ansible-galaxy install --role-file=config/requirements.yml --roles-path=roles

if [ -f "config/$username.yml" ]; then
  m.status "\nRunnning Ansible playbook for $username."
  ansible-playbook -i "localhost," config/$username.yml
else
  m.error "\nNo Ansible playbook for $username found!"
fi
