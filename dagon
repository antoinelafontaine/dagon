#!/bin/bash

directory="${BASH_SOURCE%/*}"
if [ -L "${directory}/dagon" ]; then
  # once dagon is symlinked, we can assume where it is located
  directory='/usr/local/dagon'
fi

. "$directory/includes/core.sh"
. "$directory/includes/messages.sh"
. "$directory/includes/requirements.sh"
. "$directory/includes/config.sh"

username=$USER
export ANSIBLE_ASK_SUDO_PASS=True

echo "$PATH" | grep -q 'Library/Python/2.7/bin'
if [ $? == 0 ]; then
  export PATH=$PATH:~/Library/Python/2.7/bin
fi

m.status "\nDagon will do your bidding. Sit back and enjoy...\n"
sleep 0.5

flag.check symlink
if [ $? == 1 ]; then
  if [ -f /usr/local/dagon/dagon ]; then
    m.status "Symlinking Dagon so is it available anywhere."
    sudo chmod +x /usr/local/dagon/dagon
    ln -sf /usr/local/dagon/dagon /usr/local/bin/dagon
  fi

  flag.set symlink
fi

flag.check folders
if [ $? == 1 ]; then
  m.status "Creating necessary folders. (You will be asked for your sudo password if needed)"
  sudo mkdir -p "/usr/local/dagon/roles"
  sudo mkdir -p "/usr/local/dagon/flags"
  mkdir -p "/Users/${username}/.dagon"
  sudo chmod -R g+rwx /usr/local
  sudo chgrp -R admin /usr/local

  flag.set folders
fi

m.status "Checking bash requirements"
flag.check bash_commands
if [ $? == 1 ]; then
  requirements.set "eval sleep printf read hash tput"
    requirements.failure eval abort
    requirements.failure sleep abort
    requirements.failure printf abort
    requirements.failure read abort
    requirements.failure hash abort
    requirements.failure dirname abort
    requirements.failure tput abort
  requirements.check

  flag.set bash_commands
fi

requirements.set "git"
  requirements.failure git abort
requirements.check

requirements.set "easy_install pip crudini ansible"
  requirements.failure easy_install abort
  requirements.failure pip "sudo easy_install --quiet pip"
  requirements.failure crudini "pip install --user --quiet crudini"
  requirements.failure ansible "sudo pip install --quiet ansible"
requirements.check

configuration.setup

flag.check config_repo
if [ $? == 1 ]; then
  m.status "Cloning configuration repository."
  git clone --quiet $config_repo /usr/local/dagon/config
  flag.set config_Repo
fi

cd /usr/local/dagon

flag.check ansible_config
if [ $? == 1 ]; then
  m.status "Creating ansible.cfg file."
  cat <<- --EOF > ansible.cfg
	[defaults]
	roles_path=/usr/local/dagon/roles/dev:/usr/local/dagon/roles:/usr/local/dagon/config/roles
--EOF

  flag.set ansible_config
fi

m.status "\nGet requirements using Ansible Galaxy"
ansible-galaxy install --role-file=config/requirements.yml --roles-path=roles

if [ -f "config/$username.yml" ]; then
  m.status "\nRunnning Ansible playbook for $username."
  ansible-playbook -i "localhost," config/$username.yml
else
  m.error "No Ansible playbook for $username found!"
fi
