#!/bin/bash

directory="${BASH_SOURCE%/*}"
if [ -L "${directory}/dagon" ]; then
  # once dagon is symlinked, we can assume where it is located
  directory='/usr/local/dagon'
fi

. "$directory/includes/core.sh"
. "$directory/includes/messages.sh"
. "$directory/includes/requirements.sh"
. "$directory/includes/config.sh"
. "$directory/includes/params.sh"

if [ $runmode == 'interactive' ]; then
  m.status "Run Dagon in what mode? [0]"
  m.status "[0] - Projects only ${bold}--projects${normal}"
  m.status "[1] - All projects and dependencies ${bold}--full${normal}"
  m.status "[2] - Update Dagon then run in full mode ${bold}--self-update${normal}"

  read -p "↪︎  " interactive_mode_input

  runmode='unknown'

  if [ "$interactive_mode_input" == '' ]; then
    interactive_mode_input=0
  fi

  if [ "$interactive_mode_input" == '2' ]; then
    runmode='self-update'
    m.status "${bold}[2] - Update Dagon then run in --full mode --self-update${normal}"
  elif [ "$interactive_mode_input" == '1' ]; then
    runmode='full'
    m.status "${bold}[1] - All projects and dependencies --full${normal}"
  elif [ "$interactive_mode_input" == '0' ]; then
    runmode='projects'
    m.status "${bold}[0] - Projects only${normal}"
  fi
fi

if [ $runmode == 'unknown' ]; then
  m.error "Unknown mode!"
fi

if [ $runmode == 'self-update' ]; then
  flag.remove all
  rm -rf /usr/local/dagon/roles
fi

username=$USER
#export ANSIBLE_ASK_SUDO_PASS=True

echo "$PATH" | grep -q 'Library/Python/2.7/bin'
if [ $? == 1 ]; then
  export PATH=$PATH:~/Library/Python/2.7/bin
fi

m.status "\nDagon will do your bidding. Sit back and enjoy...\n"
sleep 0.5

flag.check symlink
if [ $? == 1 ]; then
  if [ ! -L /usr/local/bin/dagon ]; then
    if [ -f /usr/local/dagon/dagon ]; then
      m.status "Symlinking Dagon so is it available anywhere."
      sudo chmod +x /usr/local/dagon/dagon
      sudo ln -sf /usr/local/dagon/dagon /usr/local/bin/dagon
    fi
  fi

  flag.set symlink
fi

flag.check folders
if [ $? == 1 ]; then
  m.status "Creating necessary folders. (You will be asked for your sudo password if needed)"
  if [ ! -d /usr/local/dagon/roles ]; then
    sudo mkdir -p "/usr/local/dagon/roles"
  fi
  if [ ! -d /usr/local/dagon/roles ]; then
    sudo mkdir -p "/usr/local/dagon/plugins"
  fi
  if [ ! -d /usr/local/dagon/flags ]; then
    sudo mkdir -p "/usr/local/dagon/flags"
  fi
  if [ ! -d /Users/${username}/.dagon ]; then
    mkdir -p "/Users/${username}/.dagon"
  fi

  sudo chmod -R g+rwx /usr/local
  sudo chgrp -R admin /usr/local

  flag.set folders
fi

m.status "Checking bash requirements"
flag.check bash_commands
if [ $? == 1 ]; then
  requirements.set "eval sleep printf read hash tput"
    requirements.failure eval abort
    requirements.failure sleep abort
    requirements.failure printf abort
    requirements.failure read abort
    requirements.failure hash abort
    requirements.failure dirname abort
    requirements.failure tput abort
  requirements.check

  flag.set bash_commands
fi

requirements.set "git"
  requirements.failure git abort
requirements.check

requirements.set "easy_install pip crudini ansible"
  requirements.failure easy_install abort
  requirements.failure pip "sudo easy_install --quiet pip"
  requirements.failure crudini "pip install --user --quiet crudini"
  requirements.failure ansible "sudo pip install --quiet ansible"
requirements.check

configuration.setup

flag.check config_repo
if [ $? == 1 ]; then
  m.status "Cloning configuration repository."
  if [ ! -d "/Users/${username}/.dagon/settings/.git" ]; then
    git clone --quiet $settings_repo "/Users/${username}/.dagon/settings"
    if [ $? == 1 ]; then
       m.error "Could not clone settings repository!"
    fi
  fi
  flag.set config_repo
fi

cd /usr/local/dagon

flag.check ansible_config
if [ $? == 1 ]; then
  m.status "Creating ansible.cfg file."
  cat <<- --EOF > ansible.cfg
	[defaults]
	roles_path=/usr/local/dagon/roles-dev:/usr/local/dagon/roles:/usr/local/dagon/config/roles
	callback_plugins=/usr/local/dagon/plugins
--EOF

  flag.set ansible_config
fi

if [ $runmode == 'self-update' ]; then
  m.status "\nGet requirements using Ansible Galaxy"
  ansible-galaxy install --role-file="/Users/${username}/.dagon/settings/requirements.yml" --roles-path=roles
fi

if [ -f "/Users/${username}/.dagon/settings/${username}.yml" ]; then
  m.status "\nRunnning Ansible playbook for $username."
  if [ $runmode == 'full' ] || [ $runmode == 'self-update' ]; then
    ansible-playbook -i "localhost," "/Users/${username}/.dagon/settings/${username}.yml"
  else
    ansible-playbook -i "localhost," "/Users/${username}/.dagon/settings/${username}.yml" --tags "project"
  fi
else
  m.error "No Ansible playbook for $username found!"
fi
