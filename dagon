#!/bin/bash

directory="${BASH_SOURCE%/*}"
. "$directory/includes/core.sh"
. "$directory/includes/messages.sh"
. "$directory/includes/requirements.sh"

username=$USER
export ANSIBLE_ASK_SUDO_PASS=True

m.status "\nDagon will do your bidding. Sit back and enjoy...\n"
sleep 0.5

flag.check folders
if [ $? == 1 ]; then
  m.status "Creating necessary folders. (You will be asked for your sudo password if needed)"
  sudo mkdir -p "/usr/local/dagon/roles"
  sudo mkdir -p "/usr/local/dagon/.dagon"
  sudo mkdir -p "/usr/local/dagon/.dagon/flags"
  sudo mkdir -p "/usr/local/dagon/.dagon/config"
  sudo chmod -R g+rwx /usr/local
  sudo chgrp -R $username /usr/local

  flag.set folders
fi

flag.check symlink
if [ $? == 1 ]; then
  if [ -f /usr/local/dagon/dagon ]; then
    m.status "Making dagon available everywhere."
    sudo chmod +x /usr/local/dagon/dagon
    ln -s /usr/local/dagon/dagon /usr/local/bin/dagon
  fi

  flag.set symlink
fi

m.status "Checking bash requirements"
flag.check bash_commands
if [ $? == 1 ]; then
  requirements.set "eval sleep printf read hash tput"
    requirements.failure eval abort
    requirements.failure sleep abort
    requirements.failure printf abort
    requirements.failure read abort
    requirements.failure hash abort
    requirements.failure dirname abort
    requirements.failure tput abort
  requirements.check

  flag.set bash_commands
fi

if [ -f /usr/local/dagon/.dagon/config/repo ]; then
  config_repo="$(cat /usr/local/dagon/.dagon/config/repo_url)"
else
  m.status "Where is your config repository located?"
  read config_repo
  if [ -n "$config_repo" ]; then
    echo $config_repo | grep --quiet '^["git"|"ssh"|"http"|"https"|"git@"].*:.*[".git"|".git\/"]$'
    if [ $? == 0 ]; then
      echo $config_repo > /usr/local/dagon/.dagon/config/repo_url
    else
      m.error "This doesn't look like a git repo."
    fi
  else
    m.error "Please provide a repo name."
  fi
fi

requirements.set "git"
  requirements.failure git abort
requirements.check

requirements.set "easy_install pip ansible"
  requirements.failure easy_install abort
  requirements.failure pip "sudo easy_install --quiet pip"
  requirements.failure ansible "sudo pip install --quiet ansible"
requirements.check

# if [ -d "/usr/local/dagon/config" ]; then
#   m.status "Updating your config from origin."
#   cd /usr/local/dagon/config
#   git pull -q
# fi

flag.check config_repo
if [ $? == 1 ]; then
  m.status "Cloning configuration repository."
  git clone --quiet $config_repo /usr/local/dagon/config
  flag.set config_Repo
fi

cd /usr/local/dagon

flag.check ansible_config
if [ $? == 1 ]; then
  m.status "Creating ansible.cfg file."
  cat <<- --EOF > ansible.cfg
	[defaults]
	roles_path=/usr/local/dagon/roles/dev:/usr/local/dagon/roles:/usr/local/dagon/config/roles
--EOF

  flag.set ansible_config
fi

m.status "\nGet requirements using Ansible Galaxy"
ansible-galaxy install --role-file=config/requirements.yml --roles-path=roles

if [ -f "config/$username.yml" ]; then
  m.status "\nRunnning Ansible playbook for $username."
  ansible-playbook -i "localhost," config/$username.yml
else
  m.error "\nNo Ansible playbook for $username found!"
fi
